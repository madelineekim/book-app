// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  books    BookInstance[]

  friends         Friendship[]      @relation("UserFriendships")
  sentRequests    FriendRequest[]   @relation("SentRequests", references: [id], fields: [id])
  receivedRequests FriendRequest[]  @relation("ReceivedRequests", references: [id], fields: [id])
}

model Friendship {
  id      Int   @id @default(autoincrement())
  user1   User @relation("UserFriendships", fields: [user1Id], references: [id])
  user1Id Int
  user2   User @relation("UserFriendships", fields: [user2Id], references: [id])
  user2Id Int

  @@unique([user1Id, user2Id]) // Ensures uniqueness in friendships
}

model FriendRequest {
  id         Int    @id @default(autoincrement())
  sender     User   @relation("SentRequests", fields: [senderId], references: [id])
  senderId   Int
  receiver   User   @relation("ReceivedRequests", fields: [receiverId], references: [id])
  receiverId Int
  status     RequestStatus @default(PENDING) // Pending, Accepted, Rejected

  @@unique([senderId, receiverId]) // Prevents duplicate requests
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model BookInstance {
  id              Int @id @default(autoincrement())
  title           String
  authors         String[]
  imageURL        String
  rating          Int
  liked           Boolean
  read            Boolean
  userId          Int
  User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}